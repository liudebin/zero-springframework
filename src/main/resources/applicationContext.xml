<?xml version="1.0" encoding="UTF-8"?>
<beans

       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
">
        <!--http://www.springframework.org/schema/aop classpath:org/springframework/aop/config/spring-aop.xsd-->
    <!--AOP 现在是解析xml的时候，无法获取命名空间，也是尴尬，Class下已经有了啊-->

    <!--profile="test"-->
   <!--<bean id="app" class="zero.test.App"/>-->
    <!--,; 都可以分割-->
    <!--<bean id="car" name="122334,232423523 11111" class="zero.test.FactoryBeanTest">-->
       <!--<property name="appInfo" value="zero,0.0.1,test"/>-->
   <!--</bean>-->
    <!--<alias name="app" alias="appAlias"/>-->

    <!-- 配置使Spring采用CGLIB代理 -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true" />-->
    <!--<aop:aspectj-autoproxy/>-->

    <!--<bean id="myInterceptor" class="zero.test.MyInterceptor"/>-->

    <bean id="allAttribute"
          class = "zero.test.AllAttribute"
          name="ao"
    scope="singleton"
    abstract="false"
          lazy-init="true"
          autowire="default"
          primary="true"
          init-method="init"
          destroy-method="destroy"
          factory-method="factoryMethod"
    >
          <!--depends-on="app"-->
          <!--factory-bean="AllAttributeFactory"-->
        <!--<description>这是个啥</description>-->

        <!--<meta key="1" value="11" />-->
        <!--<meta key="2" value="22" />-->
        <!--<meta key="3" value="33" />-->
        <!--<meta key="4" value="44" />-->

        <!--<lookup-method bean="app" name="returnApp"/>-->
        <!--<constructor-arg></constructor-arg>-->
        <!--<replaced-method name="beReplace" replacer="replacer">-->
        <!--</replaced-method>-->

        <!--<property name="b" value=" 2" />-->
    </bean>
        <!--<constructor-arg></constructor-arg> 等会儿写-->
          <!--factory-bean="heheh"-->
    <!--qualifier-->


    <!--factory-method="factoryMethod" 默认是本类的 静态 方法
    如果和 factory-bean 属性一起使用的话，则是 factory-bean的 普通 方法 -->
    <!--<bean id="allAttribute2"-->
          <!--class = "zero.test.AllAttribute"-->
          <!--scope="singleton"-->
          <!--abstract="true"-->
          <!--lazy-init="true"-->
          <!--autowire="default"-->
          <!--depends-on="app"-->
          <!--primary="true"-->
          <!--init-method="init"-->
          <!--destroy-method="destroy"-->
          <!--factory-bean="AllAttributeFactory"-->
    <!--&gt;-->

    <!--</bean>-->

    <!--<bean id="AllAttributeFactory" class = "zero.test.AllAttributeFactory"/>-->
    <!--<bean id="replacer" class = "zero.test.AllReplacer"/>-->


    <!--autowire-candidate="true"-->



</beans>